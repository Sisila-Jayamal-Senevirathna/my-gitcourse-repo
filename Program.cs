// This file was auto-generated by ML.NET Model Builder. 

using GoldFishCounterMLModel_ConsoleApp;
using Microsoft.ML.Data;
using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;

namespace GoldFishCounterMLModel_ConsoleApp
{
    class Program
    {
        // Connection string to the MSSQL database
        static string connectionString = "Data Source=db1.tkse.lk;Initial Catalog=Area51;User ID=Area51;Password=D@e5XGnULj;";
        // Modify this line in MLModel1_ConsoleApp3/Program.cs
        //string modelFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "MLModel1.mlnet");


        // Helper function to retrieve the latest image data from the MSSQL database
        static byte[] GetLatestImageDataFromDatabase()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("SELECT TOP 1 ImageData FROM tblImages ORDER BY DateModified DESC", connection))
                {
                    object result = command.ExecuteScalar();
                    if (result != DBNull.Value && result != null)
                    {
                        return (byte[])result;
                    }
                    else
                    {
                        throw new Exception("Image data not found in the database.");
                    }
                }
            }
        }

        static void Main(string[] args)
        {
            try
            {
                // Retrieve the latest image data from the MSSQL database
                byte[] imageData = GetLatestImageDataFromDatabase();

                // Create an MLImage instance from the byte array
                MLImage image;
                using (MemoryStream stream = new MemoryStream(imageData))
                {
                    image = MLImage.CreateFromStream(stream);
                }
                // Now, continue with the rest of the code to make predictions as before
                GoldFishCounterMLModel.ModelInput sampleData = new GoldFishCounterMLModel.ModelInput()
                {
                    Image = image,
                };

                // Make a single prediction on the sample data and print results.
                var predictionResult = GoldFishCounterMLModel.Predict(sampleData);

                double threshold = 0.96;

                Console.WriteLine("\n\nPredicted Boxes:\n");
                if (predictionResult.PredictedBoundingBoxes == null)
                {
                    Console.WriteLine("No Predicted Bounding Boxes");
                    return;
                }
                var boxes =
                    predictionResult.PredictedBoundingBoxes.Chunk(4)
                        .Select(x => new { XTop = x[0], YTop = x[1], XBottom = x[2], YBottom = x[3] })
                        .Zip(predictionResult.Score, (a, b) => new { Box = a, Score = b })
                        .Where (item => item.Score >= threshold);

                foreach (var item in boxes)
                {
                    Console.WriteLine($"XTop: {item.Box.XTop},YTop: {item.Box.YTop},XBottom: {item.Box.XBottom},YBottom: {item.Box.YBottom}, Score: {item.Score}\n");
                }

                int totalBoxes = boxes.Count();

                Console.WriteLine($"\nTotal = {totalBoxes}");

                System.Threading.Thread.Sleep(5000);
            }

            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }

        }

    }


}
